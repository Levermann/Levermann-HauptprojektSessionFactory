package com.levermann.Gui;

import com.levermann.entityclass.HelpWindow;
import com.levermann.entityclass.Unternehmen;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ResourceBundle;

public class LevermannGUI extends JFrame {

/*
    JMenuBar menubar;
    JMenu help;
    JMenuItem about;
    private JTextField resultsTxt;
    private JTextField Name;

    private JPanel Strategie;
    private JPanel panel1;
    private JTable table1;
    private JTextField input1;

    private JTable Unternehmen;


    public LevermannGUI() {

        setLayout(new FlowLayout());

        menubar = new JMenuBar();
        add(menubar);

        help = new JMenu("help");
        menubar.add(help);

        about = new JMenuItem("About");
        help.add(about);

        setJMenuBar(menubar);

        event e = new event();
        about.addActionListener(e);



    createDatabaseButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                result1.setText(input1.getText());
            }
        });
        showDatabaseButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                result2.add(dbfenster);

            }
        });

        Unternehmen.addInputMethodListener(new InputMethodListener() {

            public boolean equals(Unternehmen unternehmen) {

                unternehmen.getName();
                return super.equals(unternehmen);
            }

            @Override
            public void inputMethodTextChanged(InputMethodEvent event) {

            }

            @Override
            public void caretPositionChanged(InputMethodEvent event) {

            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL

    private void $$$setupUI$$$() {
        Strategie = new JPanel();
        Strategie.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        Strategie.add(panel2, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel2.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 2, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        panel2.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        table1 = new JTable();
        table1.setAutoCreateRowSorter(true);
        panel2.add(table1, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
    }

    /**
     * @noinspection ALL

    public JComponent $$$getRootComponent$$$() {
        return Strategie;
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }

    public class event implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            HelpWindow gui = new HelpWindow(LevermannGUI.this);
            gui.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
            gui.setSize(300, 100);
            gui.setLocation(300, 300);
            gui.setTitle("Second Window");
            gui.setVisible(true);

        }

    }


    public static void main(String[] args) {
        LevermannGUI gui = new LevermannGUI();

        gui.setTitle("Main Window");
        gui.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        gui.setVisible(true);
        gui.setSize(300, 100);

    }*/

}


// für die Levermannschritte ein try catch falls statt einem wert ein buchstabe übergeben wird
